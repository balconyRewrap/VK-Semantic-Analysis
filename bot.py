import nltk

nltk.download('punkt')
import telebot
import tensorflow as tf
import pickle
import scipy.sparse as sp


# Define a function to preprocess the data
def preprocess_data(data):
    X = []
    y = []
    for text, label in data:
        X.append(text)
        y.append(label)
    return X, y


# Define a function to tokenize the text
def tokenize(text):
    return text.split()


# Define a function to read the dataset
def read_dataset(file_path):
    data = []
    count = 0
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            parts = line.split(' & ')
            if len(parts) != 2:
                print(f"Ignoring line: {line}")
                count += 1
                print(count)
                continue
            text, label = parts
            data.append((text, label))

    return data


# —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot('5979403687:AAEiP9XwXrzFB0yL3FNyVEw9dZiCHTBeECg')
# –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton('–ù–∞—á–∞—Ç—å'))
keyboard.add(KeyboardButton('–ü–æ–º–æ—â—å'))
text_of_message ="d"
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–π.', reply_markup=keyboard)

# Load the trained model from file
model = tf.keras.models.load_model('text_classifier.h5')

# Load the vectorizer and transformer objects from file
with open('vectorizer.pickle', 'rb') as handle:
    vectorizer = pickle.load(handle)
with open('transformer.pickle', 'rb') as handle:
    transformer = pickle.load(handle)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def send_prediction(message):
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    username = message.chat.first_name
    text = message.text
    global text_of_message
    text_of_message=text
    print("User:", username, "\nmessage:", text)
    # Tokenize the text
    tokens = tokenize(message.text)

    # Vectorize and transform the text
    X = vectorizer.transform([' '.join(tokens)])
    X = sp.csr_matrix(X)
    X = transformer.transform(X)

    # Convert X to a dense tensor
    X = X.toarray()

    # Convert X to a Tensor
    X = tf.convert_to_tensor(X, dtype=tf.float32, name='X')

    # Make predictions
    predictions = model.predict(X)
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("Positive", callback_data='Positive'),
        telebot.types.InlineKeyboardButton("Negative", callback_data='Negative'),
        telebot.types.InlineKeyboardButton("Neutral", callback_data='Neutral'),
        telebot.types.InlineKeyboardButton("–ë–æ—Ç –ø—Ä–∞–≤", callback_data='RightPred')
    )


    # Analyze the predictions
    if ((predictions[0][0] / predictions[0][1]) < 0.78) or ((predictions[0][1] / predictions[0][0]) < 0.78):
        if predictions[0][0] > predictions[0][1]:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

            sentiment = 'positive'
            bot.reply_to(message,
                         f"–ü—Ä–∏–≤–µ—Ç, {username}!" 
                         f"–ü–æ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é '{text}' –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å. –ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! üòÉ\n"
                         f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —ç—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = {round(predictions[0][0]*100,2)}%")
            # Send the message with the two buttons
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤ –ª–∏ –Ø?\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —è –Ω–µ –ø—Ä–∞–≤:",
                             reply_markup=markup)
            print(sentiment)
        else:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

            sentiment = 'negative'
            bot.reply_to(message,
                         f"–ü—Ä–∏–≤–µ—Ç, {username}. "
                         f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é '{text}' –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å. "
                         f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤–µ–¥—å –∑–∞–≤—Ç—Ä–∞ —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –ª—É—á—à–µ! üòâ\n"
                         f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = {round(predictions[0][1]*100,2)}%")
            # Send the message with the two buttons
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤ –ª–∏ –Ø?\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —è –Ω–µ –ø—Ä–∞–≤:",
                             reply_markup=markup)
            print(sentiment)
    else:
        bot.reply_to(message,
                     f"–ü—Ä–∏–≤–µ—Ç, {username}. –ü–æ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é '{text}' –º—ã –ø—Ä–∏—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–∏–º –≤—ã–≤–æ–¥–∞–º: \n"
                     f"1) –°–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å\n"
                     f"2) –°–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å\n"
                     f"3) –î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –≤–æ–≤—Å–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."
                     f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —ç—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = {round(predictions[0][0]*100,2)}%\n"
                     f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = {round(predictions[0][1]*100,2)}%")
        # Send the message with the two buttons
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤ –ª–∏ –Ø?\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —è –Ω–µ –ø—Ä–∞–≤:", reply_markup=markup)

        print(f"Neutral")
    print("predictions[0][0]", predictions[0][0])
    print("predictions[0][1]", predictions[0][1])
    print("(predictions[0][0] / predictions[0][1])",(predictions[0][0] / predictions[0][1]))
    print("(predictions[0][1] / predictions[0][0])",(predictions[0][1] / predictions[0][0]))


# Handler function for button clicks
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    # Send the "It's wrong" message when either of the buttons is clicked
    if call.data == "Positive":
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ, —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –±–æ—Ç—É –ª—É—á—à–µ")
        with open('newdata.txt', 'a',encoding='utf-8') as f:
            f.write(str(text_of_message) + " & positive" '\n')
    if call.data == "Negative":
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ, —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –±–æ—Ç—É –ª—É—á—à–µ")
        with open('newdata.txt', 'a',encoding='utf-8') as f:
            f.write(str(text_of_message) + " & negative" '\n')
    if call.data == "Neutral":
        bot.send_message(call.message.chat.id, "–£–≤—ã, –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω, –Ω–æ —Å–ø–∞—Å–∏–±–æ –∏ —Ç–∞–∫)")
    if call.data == "RightPred":
        bot.send_message(call.message.chat.id, "–°–ª–∞–≤–∞ –±–æ–≥—É")
import threading
import os
import time



# ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
chat_id = '5222268833'

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
file_path = r'text_classifier.h5'

# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
last_modified = os.path.getmtime(file_path)
print(last_modified)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
def polling():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=30)
        except Exception as e:
            print(e)
            time.sleep(15)


# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –º–µ—Ç–æ–¥–∞ polling()
t = threading.Thread(target=polling)
t.start()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞
while True:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    current_modified = os.path.getmtime(file_path)

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    if current_modified - last_modified > 300:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        bot.send_message(chat_id, 'File has been modified!')
        bot.send_message(chat_id, 'Current:'+str(current_modified)+"\nLast:"+str(last_modified)+"\n difference:"+str(current_modified - last_modified))
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    last_modified = current_modified

    # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    time.sleep(300)